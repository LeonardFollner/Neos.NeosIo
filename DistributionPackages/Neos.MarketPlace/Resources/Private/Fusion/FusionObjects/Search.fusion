prototype(Neos.MarketPlace:Search) < prototype(Flowpack.SearchPlugin:Search) {
    templatePath = 'resource://Neos.MarketPlace/Private/Templates/NodeTypes/Search.html'

    attributes {
        class = 'market-block'
    }

    configuration {
        itemsPerPage = 30
        insertAbove = false
        insertBelow = true
        maximumNumberOfLinks = 5
    }

    @context.actionNode = Neos.MarketPlace:ClosestRepositoryStorageNodeQuery

    hasSearchQuery = ${!String.isBlank(request.arguments.search)}

    marketPlaceQuery = ${MarketPlaceSearch.query(documentNode)}

    marketPlaceQuery.@process {
        nodeType {
            expression = ${value.nodeType('Neos.MarketPlace:Package')}
            @position = 'start'
        }
        fulltext {
            expression = ${value.fulltext('*' + String.replace(this.searchTerm, '"', ''))}
            @if.hasQuery = ${this.hasSearchQuery}
        }
        sort {
            expression = ${value.sortDesc('lastActivity')}
            @if.noQuery = ${!this.hasSearchQuery}
        }
        log {
            expression = ${value.log('marketplace')}
            @position = 'end'
        }
    }

    showResult = true

    searchQuery = ${this.marketPlaceQuery}
    totalSearchResults = ${this.marketPlaceQuery.execute().count()}

    prototype(Flowpack.SearchPlugin:Search.Form) {
        templatePath = 'resource://Neos.MarketPlace/Private/Templates/NodeTypes/Search.Form.html'

        actionUri = Neos.Neos:NodeUri {
            node = ${actionNode}
        }
    }

    searchResultRenderer {
        attributes {
            class = 'search-results'
        }
    }

    @cache {
        mode = 'dynamic'

        entryIdentifier {
            documentNode = ${documentNode}
        }

        maximumLifetime = 3600

        entryDiscriminator = ${!request.arguments.search}

        entryTags {
            documentNode = ${Neos.Caching.nodeTag(documentNode)}
        }
    }
}
