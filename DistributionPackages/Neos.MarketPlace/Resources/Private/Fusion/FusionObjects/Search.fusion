root {
    @cache {
        entryIdentifier {
            searchQuery = ${MarketCaching.queryCacheKey(String.toString(request.arguments.search))}
            searchPagination = ${MarketCaching.paginationCacheKey(request)}
        }

        maximumLifetime.@process.searchQuery = ${String.isBlank(request.arguments.search) ? '86400' : '3600'}
    }
}

prototype(Neos.MarketPlace:RepositoryStorage) {
    @cache {
        entryIdentifier {
            searchQuery = ${MarketCaching.queryCacheKey(String.toString(request.arguments.search))}
            searchPagination = ${MarketCaching.paginationCacheKey(request)}
        }

        maximumLifetime = ${String.isBlank(request.arguments.search) ? '86400' : '3600'}
    }
}

prototype(Neos.MarketPlace:Search) < prototype(Flowpack.SearchPlugin:Search) {
    templatePath = 'resource://Neos.MarketPlace/Private/Templates/NodeTypes/Search.html'

    attributes {
        class = 'market-block'
    }

    configuration {
        itemsPerPage = 30
        insertAbove = ${false}
        insertBelow = ${true}
        maximumNumberOfLinks = 5
    }

    @context.actionNode = Neos.MarketPlace:ClosestRepositoryStorageNodeQuery

    hasSearchQuery = ${String.isBlank(request.arguments.search) ? false : true}

    marketPlaceQuery = ${MarketPlaceSearch.query(documentNode)}

    marketPlaceQuery.@process {
        nodeType {
            expression = ${value.nodeType('Neos.MarketPlace:Package')}
            @position = '30'
        }
        fulltextAndSort {
            expression = ${this.hasSearchQuery ? value.fulltext('*' + String.replace(this.searchTerm, '"', '') + '*') : value.sortDesc('lastActivity')}
            @position = '10'
        }
        log {
            expression = ${value.log('marketplace')}
            @position = 'end'
        }
    }

    showResult = ${true}

    searchQuery = ${this.marketPlaceQuery}
    totalSearchResults = ${this.marketPlaceQuery.execute().count()}

    prototype(Flowpack.SearchPlugin:Search.Form) {
        templatePath = 'resource://Neos.MarketPlace/Private/Templates/NodeTypes/Search.Form.html'

        actionUri = Neos.Neos:NodeUri {
            node = ${actionNode}
        }
    }

    searchResultRenderer {
        attributes {
            class = 'search-results'
        }
    }

    @cache {
        mode = 'cached'

        entryIdentifier {
            documentNode = ${documentNode}
            searchQuery = ${MarketCaching.queryCacheKey(String.toString(request.arguments.search))}
            searchPagination = ${MarketCaching.paginationCacheKey(request)}
        }

        maximumLifetime = ${String.isBlank(request.arguments.search) ? '86400' : '3600'}

        entryTags {
            1 = ${'Node_' + documentNode.identifier}
        }
    }
}
